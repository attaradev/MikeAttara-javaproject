type Query {
    users: [User!]
    user(userId: ID!): User
    products: [Product!]
    product(productId: ID!): Product
    orders: [Order!]
    order(orderId: ID!): Order
    ordersByUser(userId: ID!): [Order!]
    productsInOrder(orderId: ID!): [ProductLine!]
    lowStockProducts(threshold: Int): [Product!]
}

type Mutation {
    createUser(userData: CreateUserInput): User
    updatePassword(userId: ID!, newPassword: String!): User
    updateName(userId: ID!, newName: String!): User
    updateEmail(userId: ID!, newEmail: String!): User
    updateRole(userId: ID!, newRole: Role!): User
    deleteUser(userId: ID!): Boolean
    createProduct(productData: CreateProductInput!): Product
    updateProduct(productId: ID!, productData: UpdateProductInput!): Product
    deleteProduct(productId: ID!): Boolean
    createOrder(productLines: [ProductLineInput!]!): Order
    updateOrder(orderId: ID!, productLines: [ProductLineInput!]!): Order
    deleteOrder(orderId: ID!): Boolean
    accessToken(email: String!, password: String!): String
}

type User {
    id: ID!
    name: String
    email: String!
    role: Role!
}

enum Role {
    USER
    ADMIN
}

type Product {
    id: ID!
    name: String!
    stock: Int!
    price: Float!
}

type ProductLine {
    product: Product!
    quantity: Int!
}

type Order {
    id: ID!
    user: User!
    productLines: [ProductLine!]!
}

input UpdateProductInput {
    name: String
    stock: Int
    price: Float
}

input CreateProductInput {
    name: String!
    stock: Int!
    price: Float!
}

input CreateUserInput {
    email: String!
    password: String!
    name: String
    role: Role
}

input ProductLineInput {
    productId: ID!
    quantity: Int!
}
